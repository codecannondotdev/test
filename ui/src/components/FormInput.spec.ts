import { describe, it, expect, afterEach, vi } from 'vitest'
import { mount, VueWrapper } from '@vue/test-utils'
import PrimeVue from 'primevue/config'
import Aura from '@primevue/themes/aura'
import FormInput from './FormInput.vue'

// PrimeVue Components
import InputText from 'primevue/inputtext'
import InputNumber from 'primevue/inputnumber'
import Textarea from 'primevue/textarea'
import Select from 'primevue/select'
import MultiSelect from 'primevue/multiselect'
import Checkbox from 'primevue/checkbox'
import RadioButton from 'primevue/radiobutton'
import ToggleSwitch from 'primevue/toggleswitch'
import ToggleButton from 'primevue/togglebutton'
import DatePicker from 'primevue/datepicker'
import ColorPicker from 'primevue/colorpicker'
import Slider from 'primevue/slider'
import Knob from 'primevue/knob'
import Rating from 'primevue/rating'
import CascadeSelect from 'primevue/cascadeselect'
import TreeSelect from 'primevue/treeselect'
import ListBox from 'primevue/listbox'
import SelectButton from 'primevue/selectbutton'
import InputOtp from 'primevue/inputotp'

const globalComponents = {
	InputText,
	InputNumber,
	Textarea,
	Select,
	MultiSelect,
	Checkbox,
	RadioButton,
	ToggleSwitch,
	ToggleButton,
	DatePicker,
	ColorPicker,
	Slider,
	Knob,
	Rating,
	CascadeSelect,
	TreeSelect,
	ListBox,
	SelectButton,
	InputOtp,
}

// Mock matchMedia for components that use it
Object.defineProperty(window, 'matchMedia', {
	writable: true,
	value: vi.fn().mockImplementation((query) => ({
		matches: false,
		media: query,
		onchange: null,
		addListener: vi.fn(), // deprecated
		removeListener: vi.fn(), // deprecated
		addEventListener: vi.fn(),
		removeEventListener: vi.fn(),
		dispatchEvent: vi.fn(),
	})),
})

describe('FormInput', () => {
	let wrapper: VueWrapper<any>

	const createWrapper = (props = {}, slots = {}) => {
		return mount(FormInput, {
			props: {
				label: 'Test Label',
				...props,
			},
			slots,
			global: {
				plugins: [
					[
						PrimeVue,
						{
							theme: {
								preset: Aura,
							},
						},
					],
				],
				components: globalComponents,
			},
		})
	}

	afterEach(() => {
		if (wrapper) {
			wrapper.unmount()
		}
	})

	describe('Basic functionality', () => {
		it('renders with required props', () => {
			wrapper = createWrapper()
			expect(wrapper.find('label').text()).toBe('Test Label')
		})

		it('displays required asterisk when required prop is true', () => {
			wrapper = createWrapper({ required: true })
			expect(wrapper.find('label').text()).toBe('Test Label *')
		})

		it('displays error message when errorMessage prop is provided', () => {
			const errorMessage = 'This field is required'
			wrapper = createWrapper({ errorMessage })

			expect(wrapper.find('.form-input__error-message').text()).toBe(errorMessage)
			expect(wrapper.find('.form-input').classes()).toContain('form-input--error')
		})

		it('generates unique input id and associates it with label', async () => {
			wrapper = createWrapper(
				{},
				{
					default: '<InputText v-model="value" />',
				},
			)

			// Wait for the component to mount and set the input ID
			await wrapper.vm.$nextTick()

			const label = wrapper.find('label')
			const input = wrapper.find('input')

			// Check that both label and input exist
			expect(label.exists()).toBe(true)
			expect(input.exists()).toBe(true)

			// Check that label has a 'for' attribute
			expect(label.attributes('for')).toBeDefined()

			// Check that input has an 'id' attribute
			expect(input.attributes('id')).toBeDefined()

			// Check that the label 'for' matches the input 'id'
			expect(label.attributes('for')).toBe(input.attributes('id'))

			// Check that the ID is a string generated by useId (starts with 'v-')
			expect(label.attributes('for')).toMatch(/^v-\d+$/)
		})

		it('renders prepend-label slot content', () => {
			wrapper = createWrapper(
				{},
				{
					'prepend-label': '<div class="prepend-content">Prepend</div>',
				},
			)

			// Verify the content is in the correct container
			const prependContainer = wrapper.find('.form-input__prepend-label-container')
			const prependContent = prependContainer.find('.prepend-content')
			expect(prependContent.exists()).toBe(true)
			expect(prependContent.text()).toBe('Prepend')
		})

		it('renders custom error message slot', () => {
			wrapper = createWrapper(
				{},
				{
					'error-message': '<div class="custom-error">Custom Error</div>',
				},
			)

			// Verify the content is in the correct container
			const errorContainer = wrapper.find('.form-input__error-message-container')
			const customError = errorContainer.find('.custom-error')
			expect(customError.exists()).toBe(true)
			expect(customError.text()).toBe('Custom Error')
		})

		it('provides error-id to error-message slot', () => {
			wrapper = createWrapper(
				{ errorMessage: 'Test error' },
				{
					'error-message': `
						<template #error-message="{ errorId }">
							<div :id="errorId" class="custom-error-with-id">Custom Error with ID</div>
						</template>
					`,
				},
			)

			const errorContainer = wrapper.find('.form-input__error-message-container')
			const customError = errorContainer.find('.custom-error-with-id')
			expect(customError.exists()).toBe(true)
			expect(customError.attributes('id')).toBeDefined()
			expect(customError.attributes('id')).toMatch(/^v-\d+$/)
		})

		it('provides input-id to label slot', () => {
			wrapper = createWrapper(
				{},
				{
					label: `
						<template #label="{ inputId }">
							<label :for="inputId" class="custom-label-with-id">Custom Label with ID</label>
						</template>
					`,
				},
			)

			const labelContainer = wrapper.find('.form-input__label-container')
			const customLabel = labelContainer.find('.custom-label-with-id')
			expect(customLabel.exists()).toBe(true)
			expect(customLabel.attributes('for')).toBeDefined()
			expect(customLabel.attributes('for')).toMatch(/^v-\d+$/)
		})

		it('provides input-id to default slot', () => {
			wrapper = createWrapper(
				{},
				{
					default: `
						<template #default="{ inputId }">
							<input :id="inputId" class="custom-input-with-id" />
						</template>
					`,
				},
			)

			const inputContainer = wrapper.find('.form-input__input-container')
			const customInput = inputContainer.find('.custom-input-with-id')
			expect(customInput.exists()).toBe(true)
			expect(customInput.attributes('id')).toBeDefined()
			expect(customInput.attributes('id')).toMatch(/^v-\d+$/)
		})
	})

	describe('PrimeVue InputText component', () => {
		it('sets correct id and associates with label', async () => {
			wrapper = createWrapper({}, { default: '<InputText v-model="value" />' })

			await wrapper.vm.$nextTick()
			const input = wrapper.find('input')
			const label = wrapper.find('label')
			expect(input.attributes('id')).toBe(label.attributes('for'))
		})

		it('sets aria-describedby when error exists', async () => {
			wrapper = createWrapper(
				{ errorMessage: 'Error message' },
				{ default: '<InputText v-model="value" />' },
			)

			await wrapper.vm.$nextTick()
			const input = wrapper.find('input')
			const errorMessage = wrapper.find('.form-input__error-message')
			expect(input.attributes('aria-describedby')).toBe(errorMessage.attributes('id'))
		})

		it('removes aria-describedby when error message is unset', async () => {
			wrapper = createWrapper(
				{ errorMessage: 'Error message' },
				{ default: '<InputText v-model="value" />' },
			)

			await wrapper.vm.$nextTick()
			const input = wrapper.find('input')

			// Initially should have aria-describedby
			expect(input.attributes('aria-describedby')).toBeDefined()

			// Update props to remove error message
			await wrapper.setProps({ errorMessage: undefined })

			// aria-describedby should be removed
			expect(input.attributes('aria-describedby')).toBeUndefined()
		})
	})

	describe('PrimeVue InputNumber component', () => {
		it('sets correct id and associates with label', async () => {
			wrapper = createWrapper({}, { default: '<InputNumber v-model="value" />' })

			await wrapper.vm.$nextTick()
			const input = wrapper.find('input')
			const label = wrapper.find('label')
			expect(input.attributes('id')).toBe(label.attributes('for'))
		})

		it('sets aria-describedby when error exists', async () => {
			wrapper = createWrapper(
				{ errorMessage: 'Error message' },
				{ default: '<InputNumber v-model="value" />' },
			)

			await wrapper.vm.$nextTick()
			const input = wrapper.find('input')
			const errorMessage = wrapper.find('.form-input__error-message')
			expect(input.attributes('aria-describedby')).toBe(errorMessage.attributes('id'))
		})

		it('removes aria-describedby when error message is unset', async () => {
			wrapper = createWrapper(
				{ errorMessage: 'Error message' },
				{ default: '<InputNumber v-model="value" />' },
			)

			await wrapper.vm.$nextTick()
			const input = wrapper.find('input')

			// Initially should have aria-describedby
			expect(input.attributes('aria-describedby')).toBeDefined()

			// Update props to remove error message
			await wrapper.setProps({ errorMessage: undefined })

			// aria-describedby should be removed
			expect(input.attributes('aria-describedby')).toBeUndefined()
		})
	})

	describe('PrimeVue Textarea component', () => {
		it('sets correct id and associates with label', async () => {
			wrapper = createWrapper({}, { default: '<Textarea v-model="value" />' })

			await wrapper.vm.$nextTick()
			const textarea = wrapper.find('textarea')
			const label = wrapper.find('label')
			expect(textarea.attributes('id')).toBe(label.attributes('for'))
		})

		it('sets aria-describedby when error exists', async () => {
			wrapper = createWrapper(
				{ errorMessage: 'Error message' },
				{ default: '<Textarea v-model="value" />' },
			)

			await wrapper.vm.$nextTick()
			const textarea = wrapper.find('textarea')
			const errorMessage = wrapper.find('.form-input__error-message')
			expect(textarea.attributes('aria-describedby')).toBe(errorMessage.attributes('id'))
		})

		it('removes aria-describedby when error message is unset', async () => {
			wrapper = createWrapper(
				{ errorMessage: 'Error message' },
				{ default: '<Textarea v-model="value" />' },
			)

			await wrapper.vm.$nextTick()
			const textarea = wrapper.find('textarea')

			// Initially should have aria-describedby
			expect(textarea.attributes('aria-describedby')).toBeDefined()

			// Update props to remove error message
			await wrapper.setProps({ errorMessage: undefined })

			// aria-describedby should be removed
			expect(textarea.attributes('aria-describedby')).toBeUndefined()
		})
	})

	describe('PrimeVue MultiSelect component', () => {
		it('sets correct id and associates with label', async () => {
			wrapper = createWrapper({}, { default: '<MultiSelect v-model="value" :options="[]" />' })

			await wrapper.vm.$nextTick()
			const input = wrapper.find('input')
			const label = wrapper.find('label')
			expect(input.attributes('id')).toBe(label.attributes('for'))
		})

		it('sets aria-describedby when error exists', async () => {
			wrapper = createWrapper(
				{ errorMessage: 'Error message' },
				{ default: '<MultiSelect v-model="value" :options="[]" />' },
			)

			await wrapper.vm.$nextTick()
			const input = wrapper.find('input')
			const errorMessage = wrapper.find('.form-input__error-message')
			expect(input.attributes('aria-describedby')).toBe(errorMessage.attributes('id'))
		})

		it('removes aria-describedby when error message is unset', async () => {
			wrapper = createWrapper(
				{ errorMessage: 'Error message' },
				{ default: '<MultiSelect v-model="value" :options="[]" />' },
			)

			await wrapper.vm.$nextTick()
			const input = wrapper.find('input')

			// Initially should have aria-describedby
			expect(input.attributes('aria-describedby')).toBeDefined()

			// Update props to remove error message
			await wrapper.setProps({ errorMessage: undefined })

			// aria-describedby should be removed
			expect(input.attributes('aria-describedby')).toBeUndefined()
		})
	})

	describe('PrimeVue Checkbox component', () => {
		it('sets correct id and associates with label', async () => {
			wrapper = createWrapper({}, { default: '<Checkbox v-model="value" />' })

			await wrapper.vm.$nextTick()
			const input = wrapper.find('input[type="checkbox"]')
			const label = wrapper.find('label')
			expect(input.attributes('id')).toBe(label.attributes('for'))
		})

		it('sets aria-describedby when error exists', async () => {
			wrapper = createWrapper(
				{ errorMessage: 'Error message' },
				{ default: '<Checkbox v-model="value" />' },
			)

			await wrapper.vm.$nextTick()
			const input = wrapper.find('input[type="checkbox"]')
			const errorMessage = wrapper.find('.form-input__error-message')
			expect(input.attributes('aria-describedby')).toBe(errorMessage.attributes('id'))
		})

		it('removes aria-describedby when error message is unset', async () => {
			wrapper = createWrapper(
				{ errorMessage: 'Error message' },
				{ default: '<Checkbox v-model="value" />' },
			)

			await wrapper.vm.$nextTick()
			const input = wrapper.find('input[type="checkbox"]')

			// Initially should have aria-describedby
			expect(input.attributes('aria-describedby')).toBeDefined()

			// Update props to remove error message
			await wrapper.setProps({ errorMessage: undefined })

			// aria-describedby should be removed
			expect(input.attributes('aria-describedby')).toBeUndefined()
		})
	})

	describe('PrimeVue RadioButton component', () => {
		it('sets correct id and associates with label', async () => {
			wrapper = createWrapper({}, { default: '<RadioButton v-model="value" />' })

			await wrapper.vm.$nextTick()
			const input = wrapper.find('input[type="radio"]')
			const label = wrapper.find('label')
			expect(input.attributes('id')).toBe(label.attributes('for'))
		})

		it('sets aria-describedby when error exists', async () => {
			wrapper = createWrapper(
				{ errorMessage: 'Error message' },
				{ default: '<RadioButton v-model="value" />' },
			)

			await wrapper.vm.$nextTick()
			const input = wrapper.find('input[type="radio"]')
			const errorMessage = wrapper.find('.form-input__error-message')
			expect(input.attributes('aria-describedby')).toBe(errorMessage.attributes('id'))
		})

		it('removes aria-describedby when error message is unset', async () => {
			wrapper = createWrapper(
				{ errorMessage: 'Error message' },
				{ default: '<RadioButton v-model="value" />' },
			)

			await wrapper.vm.$nextTick()
			const input = wrapper.find('input[type="radio"]')

			// Initially should have aria-describedby
			expect(input.attributes('aria-describedby')).toBeDefined()

			// Update props to remove error message
			await wrapper.setProps({ errorMessage: undefined })

			// aria-describedby should be removed
			expect(input.attributes('aria-describedby')).toBeUndefined()
		})
	})

	describe('PrimeVue ToggleSwitch component', () => {
		it('sets correct id and associates with label', async () => {
			wrapper = createWrapper({}, { default: '<ToggleSwitch v-model="value" />' })

			await wrapper.vm.$nextTick()
			const input = wrapper.find('input')
			const label = wrapper.find('label')
			expect(input.attributes('id')).toBe(label.attributes('for'))
		})

		it('sets aria-describedby when error exists', async () => {
			wrapper = createWrapper(
				{ errorMessage: 'Error message' },
				{ default: '<ToggleSwitch v-model="value" />' },
			)

			await wrapper.vm.$nextTick()
			const input = wrapper.find('input')
			const errorMessage = wrapper.find('.form-input__error-message')
			expect(input.attributes('aria-describedby')).toBe(errorMessage.attributes('id'))
		})

		it('removes aria-describedby when error message is unset', async () => {
			wrapper = createWrapper(
				{ errorMessage: 'Error message' },
				{ default: '<ToggleSwitch v-model="value" />' },
			)

			await wrapper.vm.$nextTick()
			const input = wrapper.find('input')

			// Initially should have aria-describedby
			expect(input.attributes('aria-describedby')).toBeDefined()

			// Update props to remove error message
			await wrapper.setProps({ errorMessage: undefined })

			// aria-describedby should be removed
			expect(input.attributes('aria-describedby')).toBeUndefined()
		})
	})

	describe('PrimeVue DatePicker component', () => {
		it('sets correct id and associates with label', async () => {
			wrapper = createWrapper({}, { default: '<DatePicker v-model="value" />' })

			await wrapper.vm.$nextTick()
			const input = wrapper.find('input')
			const label = wrapper.find('label')
			expect(input.attributes('id')).toBe(label.attributes('for'))
		})

		it('sets aria-describedby when error exists', async () => {
			wrapper = createWrapper(
				{ errorMessage: 'Error message' },
				{ default: '<DatePicker v-model="value" />' },
			)

			await wrapper.vm.$nextTick()
			const input = wrapper.find('input')
			const errorMessage = wrapper.find('.form-input__error-message')
			expect(input.attributes('aria-describedby')).toBe(errorMessage.attributes('id'))
		})

		it('removes aria-describedby when error message is unset', async () => {
			wrapper = createWrapper(
				{ errorMessage: 'Error message' },
				{ default: '<DatePicker v-model="value" />' },
			)

			await wrapper.vm.$nextTick()
			const input = wrapper.find('input')

			// Initially should have aria-describedby
			expect(input.attributes('aria-describedby')).toBeDefined()

			// Update props to remove error message
			await wrapper.setProps({ errorMessage: undefined })

			// aria-describedby should be removed
			expect(input.attributes('aria-describedby')).toBeUndefined()
		})
	})

	describe('PrimeVue ColorPicker component', () => {
		it('sets correct id and associates with label', async () => {
			wrapper = createWrapper({}, { default: '<ColorPicker v-model="value" />' })

			await wrapper.vm.$nextTick()
			const input = wrapper.find('input')
			const label = wrapper.find('label')
			expect(input.attributes('id')).toBe(label.attributes('for'))
		})

		it('sets aria-describedby when error exists', async () => {
			wrapper = createWrapper(
				{ errorMessage: 'Error message' },
				{ default: '<ColorPicker v-model="value" />' },
			)

			await wrapper.vm.$nextTick()
			const input = wrapper.find('input')
			const errorMessage = wrapper.find('.form-input__error-message')
			expect(input.attributes('aria-describedby')).toBe(errorMessage.attributes('id'))
		})

		it('removes aria-describedby when error message is unset', async () => {
			wrapper = createWrapper(
				{ errorMessage: 'Error message' },
				{ default: '<ColorPicker v-model="value" />' },
			)

			await wrapper.vm.$nextTick()
			const input = wrapper.find('input')

			// Initially should have aria-describedby
			expect(input.attributes('aria-describedby')).toBeDefined()

			// Update props to remove error message
			await wrapper.setProps({ errorMessage: undefined })

			// aria-describedby should be removed
			expect(input.attributes('aria-describedby')).toBeUndefined()
		})
	})

	describe('PrimeVue Rating component', () => {
		it('sets correct id and associates with label', async () => {
			wrapper = createWrapper({}, { default: '<Rating v-model="value" />' })

			await wrapper.vm.$nextTick()
			const input = wrapper.find('input')
			const label = wrapper.find('label')
			expect(input.attributes('id')).toBe(label.attributes('for'))
		})

		it('sets aria-describedby when error exists', async () => {
			wrapper = createWrapper(
				{ errorMessage: 'Error message' },
				{ default: '<Rating v-model="value" />' },
			)

			await wrapper.vm.$nextTick()
			const input = wrapper.find('input')
			const errorMessage = wrapper.find('.form-input__error-message')
			expect(input.attributes('aria-describedby')).toBe(errorMessage.attributes('id'))
		})

		it('removes aria-describedby when error message is unset', async () => {
			wrapper = createWrapper(
				{ errorMessage: 'Error message' },
				{ default: '<Rating v-model="value" />' },
			)

			await wrapper.vm.$nextTick()
			const input = wrapper.find('input')

			// Initially should have aria-describedby
			expect(input.attributes('aria-describedby')).toBeDefined()

			// Update props to remove error message
			await wrapper.setProps({ errorMessage: undefined })

			// aria-describedby should be removed
			expect(input.attributes('aria-describedby')).toBeUndefined()
		})
	})

	describe('PrimeVue CascadeSelect component', () => {
		it('sets correct id and associates with label', async () => {
			wrapper = createWrapper({}, { default: '<CascadeSelect v-model="value" :options="[]" />' })

			await wrapper.vm.$nextTick()
			const input = wrapper.find('input')
			const label = wrapper.find('label')
			expect(input.attributes('id')).toBe(label.attributes('for'))
		})

		it('sets aria-describedby when error exists', async () => {
			wrapper = createWrapper(
				{ errorMessage: 'Error message' },
				{ default: '<CascadeSelect v-model="value" :options="[]" />' },
			)

			await wrapper.vm.$nextTick()
			const input = wrapper.find('input')
			const errorMessage = wrapper.find('.form-input__error-message')
			expect(input.attributes('aria-describedby')).toBe(errorMessage.attributes('id'))
		})

		it('removes aria-describedby when error message is unset', async () => {
			wrapper = createWrapper(
				{ errorMessage: 'Error message' },
				{ default: '<CascadeSelect v-model="value" :options="[]" />' },
			)

			await wrapper.vm.$nextTick()
			const input = wrapper.find('input')

			// Initially should have aria-describedby
			expect(input.attributes('aria-describedby')).toBeDefined()

			// Update props to remove error message
			await wrapper.setProps({ errorMessage: undefined })

			// aria-describedby should be removed
			expect(input.attributes('aria-describedby')).toBeUndefined()
		})
	})

	describe('PrimeVue TreeSelect component', () => {
		it('sets correct id and associates with label', async () => {
			wrapper = createWrapper({}, { default: '<TreeSelect v-model="value" :options="[]" />' })

			await wrapper.vm.$nextTick()
			const input = wrapper.find('input')
			const label = wrapper.find('label')
			expect(input.attributes('id')).toBe(label.attributes('for'))
		})

		it('sets aria-describedby when error exists', async () => {
			wrapper = createWrapper(
				{ errorMessage: 'Error message' },
				{ default: '<TreeSelect v-model="value" :options="[]" />' },
			)

			await wrapper.vm.$nextTick()
			const input = wrapper.find('input')
			const errorMessage = wrapper.find('.form-input__error-message')
			expect(input.attributes('aria-describedby')).toBe(errorMessage.attributes('id'))
		})

		it('removes aria-describedby when error message is unset', async () => {
			wrapper = createWrapper(
				{ errorMessage: 'Error message' },
				{ default: '<TreeSelect v-model="value" :options="[]" />' },
			)

			await wrapper.vm.$nextTick()
			const input = wrapper.find('input')

			// Initially should have aria-describedby
			expect(input.attributes('aria-describedby')).toBeDefined()

			// Update props to remove error message
			await wrapper.setProps({ errorMessage: undefined })

			// aria-describedby should be removed
			expect(input.attributes('aria-describedby')).toBeUndefined()
		})
	})

	describe('PrimeVue InputOtp component', () => {
		it('sets correct id and associates with label', async () => {
			wrapper = createWrapper({}, { default: '<InputOtp v-model="value" />' })

			await wrapper.vm.$nextTick()
			const input = wrapper.find('input')
			const label = wrapper.find('label')
			expect(input.attributes('id')).toBe(label.attributes('for'))
		})

		it('sets aria-describedby when error exists', async () => {
			wrapper = createWrapper(
				{ errorMessage: 'Error message' },
				{ default: '<InputOtp v-model="value" />' },
			)

			await wrapper.vm.$nextTick()
			const input = wrapper.find('input')
			const errorMessage = wrapper.find('.form-input__error-message')
			expect(input.attributes('aria-describedby')).toBe(errorMessage.attributes('id'))
		})

		it('removes aria-describedby when error message is unset', async () => {
			wrapper = createWrapper(
				{ errorMessage: 'Error message' },
				{ default: '<InputOtp v-model="value" />' },
			)

			await wrapper.vm.$nextTick()
			const input = wrapper.find('input')

			// Initially should have aria-describedby
			expect(input.attributes('aria-describedby')).toBeDefined()

			// Update props to remove error message
			await wrapper.setProps({ errorMessage: undefined })

			// aria-describedby should be removed
			expect(input.attributes('aria-describedby')).toBeUndefined()
		})
	})

	describe('PrimeVue Select component', () => {
		it('sets aria-labelledby and associates with label', async () => {
			wrapper = createWrapper({}, { default: '<Select v-model="value" :options="[]" />' })

			await wrapper.vm.$nextTick()
			const label = wrapper.find('label')
			const selectComponent = wrapper.find('.p-select')
			expect(selectComponent.attributes('aria-labelledby')).toBe(label.attributes('for'))
		})

		it('sets aria-describedby when error exists', async () => {
			wrapper = createWrapper(
				{ errorMessage: 'Error message' },
				{ default: '<Select v-model="value" :options="[]" />' },
			)

			await wrapper.vm.$nextTick()
			const selectComponent = wrapper.find('.p-select')
			const errorMessage = wrapper.find('.form-input__error-message')
			expect(selectComponent.attributes('aria-describedby')).toBe(errorMessage.attributes('id'))
		})

		it('removes aria-describedby when error message is unset', async () => {
			wrapper = createWrapper(
				{ errorMessage: 'Error message' },
				{ default: '<Select v-model="value" :options="[]" />' },
			)

			await wrapper.vm.$nextTick()
			const selectComponent = wrapper.find('.p-select')

			// Initially should have aria-describedby
			expect(selectComponent.attributes('aria-describedby')).toBeDefined()

			// Update props to remove error message
			await wrapper.setProps({ errorMessage: undefined })

			// aria-describedby should be removed
			expect(selectComponent.attributes('aria-describedby')).toBeUndefined()
		})
	})

	describe('PrimeVue ToggleButton component', () => {
		it('sets aria-labelledby and associates with label', async () => {
			wrapper = createWrapper({}, { default: '<ToggleButton v-model="value" />' })

			await wrapper.vm.$nextTick()
			const label = wrapper.find('label')
			const toggleButtonComponent = wrapper.find('.p-togglebutton')
			expect(toggleButtonComponent.attributes('aria-labelledby')).toBe(label.attributes('for'))
		})

		it('sets aria-describedby when error exists', async () => {
			wrapper = createWrapper(
				{ errorMessage: 'Error message' },
				{ default: '<ToggleButton v-model="value" />' },
			)

			await wrapper.vm.$nextTick()
			const toggleButtonComponent = wrapper.find('.p-togglebutton')
			const errorMessage = wrapper.find('.form-input__error-message')
			expect(toggleButtonComponent.attributes('aria-describedby')).toBe(
				errorMessage.attributes('id'),
			)
		})

		it('removes aria-describedby when error message is unset', async () => {
			wrapper = createWrapper(
				{ errorMessage: 'Error message' },
				{ default: '<ToggleButton v-model="value" />' },
			)

			await wrapper.vm.$nextTick()
			const toggleButtonComponent = wrapper.find('.p-togglebutton')

			// Initially should have aria-describedby
			expect(toggleButtonComponent.attributes('aria-describedby')).toBeDefined()

			// Update props to remove error message
			await wrapper.setProps({ errorMessage: undefined })

			// aria-describedby should be removed
			expect(toggleButtonComponent.attributes('aria-describedby')).toBeUndefined()
		})
	})

	describe('PrimeVue Slider component', () => {
		it('sets aria-labelledby and associates with label', async () => {
			wrapper = createWrapper({}, { default: '<Slider v-model="value" />' })

			await wrapper.vm.$nextTick()
			const label = wrapper.find('label')
			const sliderComponent = wrapper.find('.p-slider')
			expect(sliderComponent.attributes('aria-labelledby')).toBe(label.attributes('for'))
		})

		it('sets aria-describedby when error exists', async () => {
			wrapper = createWrapper(
				{ errorMessage: 'Error message' },
				{ default: '<Slider v-model="value" />' },
			)

			await wrapper.vm.$nextTick()
			const sliderComponent = wrapper.find('.p-slider')
			const errorMessage = wrapper.find('.form-input__error-message')
			expect(sliderComponent.attributes('aria-describedby')).toBe(errorMessage.attributes('id'))
		})

		it('removes aria-describedby when error message is unset', async () => {
			wrapper = createWrapper(
				{ errorMessage: 'Error message' },
				{ default: '<Slider v-model="value" />' },
			)

			await wrapper.vm.$nextTick()
			const sliderComponent = wrapper.find('.p-slider')

			// Initially should have aria-describedby
			expect(sliderComponent.attributes('aria-describedby')).toBeDefined()

			// Update props to remove error message
			await wrapper.setProps({ errorMessage: undefined })

			// aria-describedby should be removed
			expect(sliderComponent.attributes('aria-describedby')).toBeUndefined()
		})
	})

	describe('PrimeVue Knob component', () => {
		it('sets aria-labelledby and associates with label', async () => {
			wrapper = createWrapper({}, { default: '<Knob v-model="value" />' })

			await wrapper.vm.$nextTick()
			const label = wrapper.find('label')
			const knobComponent = wrapper.find('.p-knob')
			expect(knobComponent.attributes('aria-labelledby')).toBe(label.attributes('for'))
		})

		it('sets aria-describedby when error exists', async () => {
			wrapper = createWrapper(
				{ errorMessage: 'Error message' },
				{ default: '<Knob v-model="value" />' },
			)

			await wrapper.vm.$nextTick()
			const knobComponent = wrapper.find('.p-knob')
			const errorMessage = wrapper.find('.form-input__error-message')
			expect(knobComponent.attributes('aria-describedby')).toBe(errorMessage.attributes('id'))
		})

		it('removes aria-describedby when error message is unset', async () => {
			wrapper = createWrapper(
				{ errorMessage: 'Error message' },
				{ default: '<Knob v-model="value" />' },
			)

			await wrapper.vm.$nextTick()
			const knobComponent = wrapper.find('.p-knob')

			// Initially should have aria-describedby
			expect(knobComponent.attributes('aria-describedby')).toBeDefined()

			// Update props to remove error message
			await wrapper.setProps({ errorMessage: undefined })

			// aria-describedby should be removed
			expect(knobComponent.attributes('aria-describedby')).toBeUndefined()
		})
	})

	describe('PrimeVue ListBox component', () => {
		it('sets aria-labelledby and associates with label', async () => {
			wrapper = createWrapper({}, { default: '<ListBox v-model="value" :options="[]" />' })

			await wrapper.vm.$nextTick()
			const label = wrapper.find('label')
			const listboxComponent = wrapper.find('.p-listbox')
			expect(listboxComponent.attributes('aria-labelledby')).toBe(label.attributes('for'))
		})

		it('sets aria-describedby when error exists', async () => {
			wrapper = createWrapper(
				{ errorMessage: 'Error message' },
				{ default: '<ListBox v-model="value" :options="[]" />' },
			)

			await wrapper.vm.$nextTick()
			const listboxComponent = wrapper.find('.p-listbox')
			const errorMessage = wrapper.find('.form-input__error-message')
			expect(listboxComponent.attributes('aria-describedby')).toBe(errorMessage.attributes('id'))
		})

		it('removes aria-describedby when error message is unset', async () => {
			wrapper = createWrapper(
				{ errorMessage: 'Error message' },
				{ default: '<ListBox v-model="value" :options="[]" />' },
			)

			await wrapper.vm.$nextTick()
			const listboxComponent = wrapper.find('.p-listbox')

			// Initially should have aria-describedby
			expect(listboxComponent.attributes('aria-describedby')).toBeDefined()

			// Update props to remove error message
			await wrapper.setProps({ errorMessage: undefined })

			// aria-describedby should be removed
			expect(listboxComponent.attributes('aria-describedby')).toBeUndefined()
		})
	})

	describe('PrimeVue SelectButton component', () => {
		it('sets aria-labelledby and associates with label', async () => {
			wrapper = createWrapper({}, { default: '<SelectButton v-model="value" :options="[]" />' })

			await wrapper.vm.$nextTick()
			const label = wrapper.find('label')
			const selectButtonComponent = wrapper.find('.p-selectbutton')
			expect(selectButtonComponent.attributes('aria-labelledby')).toBe(label.attributes('for'))
		})

		it('sets aria-describedby when error exists', async () => {
			wrapper = createWrapper(
				{ errorMessage: 'Error message' },
				{ default: '<SelectButton v-model="value" :options="[]" />' },
			)

			await wrapper.vm.$nextTick()
			const selectButtonComponent = wrapper.find('.p-selectbutton')
			const errorMessage = wrapper.find('.form-input__error-message')
			expect(selectButtonComponent.attributes('aria-describedby')).toBe(
				errorMessage.attributes('id'),
			)
		})

		it('removes aria-describedby when error message is unset', async () => {
			wrapper = createWrapper(
				{ errorMessage: 'Error message' },
				{ default: '<SelectButton v-model="value" :options="[]" />' },
			)

			await wrapper.vm.$nextTick()
			const selectButtonComponent = wrapper.find('.p-selectbutton')

			// Initially should have aria-describedby
			expect(selectButtonComponent.attributes('aria-describedby')).toBeDefined()

			// Update props to remove error message
			await wrapper.setProps({ errorMessage: undefined })

			// aria-describedby should be removed
			expect(selectButtonComponent.attributes('aria-describedby')).toBeUndefined()
		})
	})

	// Layout and slot tests
	describe('Inline input layout', () => {
		it('applies inline layout class when prepend-input slot is used', () => {
			wrapper = createWrapper(
				{},
				{
					'prepend-input': '<p class="prepend-content">Prepend Input</p>',
				},
			)

			const labelContainer = wrapper.find('.form-input__label-container')
			expect(labelContainer.classes()).toContain('form-input__label-container--inline-input')

			const prependInputContainer = labelContainer.find('.form-input__input-container')
			const prependContent = prependInputContainer.find('.prepend-content')
			expect(prependContent.exists()).toBe(true)
		})

		it('applies inline layout class when append-input slot is used', () => {
			wrapper = createWrapper(
				{},
				{
					'append-input': '<p class="append-content">Append Input</p>',
				},
			)

			const labelContainer = wrapper.find('.form-input__label-container')
			expect(labelContainer.classes()).toContain('form-input__label-container--inline-input')

			const appendInputContainer = labelContainer.find('.form-input__input-container')
			const appendContent = appendInputContainer.find('.append-content')
			expect(appendContent.exists()).toBe(true)
		})

		it('renders both prepend and append inputs correctly', () => {
			wrapper = createWrapper(
				{},
				{
					'prepend-input': '<p class="prepend-content">Prepend Input</p>',
					'append-input': '<p class="append-content">Append Input</p>',
				},
			)

			// Verify the inline layout class is applied
			const labelContainer = wrapper.find('.form-input__label-container')
			expect(labelContainer.classes()).toContain('form-input__label-container--inline-input')

			// Verify both inputs are in separate containers within the label container
			const inputContainers = labelContainer.findAll('.form-input__input-container')
			expect(inputContainers.length).toBe(2)

			// Verify the prepend input is in the first container
			const prependContent = inputContainers[0].find('.prepend-content')
			expect(prependContent.exists()).toBe(true)

			// Verify the append input is in the second container
			const appendContent = inputContainers[1].find('.append-content')
			expect(appendContent.exists()).toBe(true)
		})

		it('renders default slot input in separate container', () => {
			wrapper = createWrapper(
				{},
				{
					default: '<input class="default-input" />',
				},
			)

			// Verify the default input is in its own container outside the label container
			const defaultInputContainer = wrapper.find('.form-input > .form-input__input-container')
			const defaultInput = defaultInputContainer.find('.default-input')
			expect(defaultInput.exists()).toBe(true)

			// Verify it's not in the label container
			const labelContainer = wrapper.find('.form-input__label-container')
			const inputInLabelContainer = labelContainer.find('.default-input')
			expect(inputInLabelContainer.exists()).toBe(false)
		})
	})

	describe('Label slot functionality', () => {
		it('provides input-id to label slot', () => {
			wrapper = createWrapper(
				{},
				{
					label: `
					<template #label="{ inputId }">
						<label :for="inputId" class="custom-label">Custom Label</label>
					</template>
				`,
				},
			)

			// Verify the custom label is in the correct container
			const labelContainer = wrapper.find('.form-input__label-container')
			const customLabel = labelContainer.find('.custom-label')
			expect(customLabel.exists()).toBe(true)
			expect(customLabel.attributes('for')).toBeDefined()
			expect(customLabel.text()).toBe('Custom Label')
		})
	})

	// General accessibility tests
	describe('Accessibility', () => {
		it('adds aria-required when required prop is true', async () => {
			wrapper = createWrapper({ required: true }, { default: '<InputText v-model="value" />' })

			await wrapper.vm.$nextTick()
			const input = wrapper.find('input')
			expect(input.attributes('aria-required')).toBe('true')
		})

		it('does not add aria-required when required prop is false', async () => {
			wrapper = createWrapper({ required: false }, { default: '<InputText v-model="value" />' })

			await wrapper.vm.$nextTick()
			const input = wrapper.find('input')
			expect(input.attributes('aria-required')).toBeUndefined()
		})

		it('aria-describedby works with custom error message slot', async () => {
			wrapper = createWrapper(
				{ errorMessage: 'Custom error' },
				{
					default: '<InputText v-model="value" />',
					'error-message': `
						<template #error-message="{ errorId }">
							<div :id="errorId" class="custom-error-message">Custom Error Message</div>
						</template>
					`,
				},
			)

			await wrapper.vm.$nextTick()
			const input = wrapper.find('input')

			// Verify the custom error message is in the correct container
			const errorContainer = wrapper.find('.form-input__error-message-container')
			const customErrorMessage = errorContainer.find('.custom-error-message')

			expect(customErrorMessage.exists()).toBe(true)
			expect(input.attributes('aria-describedby')).toBe(customErrorMessage.attributes('id'))
			expect(customErrorMessage.text()).toBe('Custom Error Message')
		})
	})
})
